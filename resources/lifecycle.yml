#
# - state-machine controlling a single zookeeper broker
# - the configuration data (e.g broker ids) is meant to be passed
#   from the control plane and rendered into zoo.cfg
# - please note /tmp/state will be used as our kontrol slave payload
#
initial: stop
terminal: stop
states:
- tag: stop
  shell: |
    #
    # - reset the failure counter
    # - stop the broker and stay put
    # - update /tmp/state
    #
    echo SET N 0 | socat - $SOCKET
    supervisorctl stop zookeeper
    echo '"stopped"' > /tmp/state
  next: 
    - start
    - stop

- tag: start
  shell: |
    #
    # - render myid + zoo.cfg via a python script
    # - start the broker
    # - pause a bit to let the JVM boot
    #
    # @todo anything else to check in there ?
    #
    python render.py
    supervisorctl start zookeeper
    sleep 5 && echo GOTO check | socat - $SOCKET
  next: 
    - check
    - stop

- tag: check
  shell: |

    #
    # - simply issue a periodic MNTR against the local broker
    # - update /tmp/state
    #
    ZK=$(echo mntr | nc localhost 2181 | grep zk_server_state | awk '{print $2}')
    echo '"'${ZK:=dead}'"'  > /tmp/state
    if [ "$ZK" == 'standalone' ] || [ "$ZK" == 'leader' ] || [ "$ZK" == 'follower' ] ; then
      
      #
      # - the broker is functioning
      # - reset the failure counter
      # - pause for 25 seconds and loop back
      #
      echo SET N 0 | socat - $SOCKET
      echo local broker is $ZK
      sleep 25 && echo GOTO check | socat - $SOCKET
    
    else

      #
      # - increment the failure counter
      # - if we failed more than 5 times in a row revert to 'stop'
      # - compute an exponential backoff delay using bc
      # - cap it to one minute and loop back
      #
      N=$((N+1))
      if [ $N -gt 5 ] ; then
        echo GOTO stop | socat - $SOCKET  
      else
        echo SET N $N | socat - $SOCKET
        supervisorctl restart zookeeper
        B=$(echo "(2^$N - 1) / 2" | bc)
        if [ $B -gt 60 ] ; then
          B=60
        fi
        echo backing off for $B seconds...
        sleep $B && echo GOTO check | socat - $SOCKET
      fi
    fi
  next: 
    - check
    - stop
