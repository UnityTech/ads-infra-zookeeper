#
# - state-machine controlling a single zookeeper broker
# - the configuration data (e.g broker ids) is meant to be passed
#   from the control plane and rendered into zoo.cfg
# - please note /data/state will be used as our kontrol slave payload
#
initial: setup
terminal: shutdown
states:
- tag: setup
  shell: |

    #
    # - make sure /data is there
    # - append the statsd + zookeeper telegraf inputs
    # - start telegraf
    #
    mkdir -p /data
    cat <<EOT >> /etc/telegraf/telegraf.conf
    [[inputs.statsd]]
      service_address = "127.0.0.1:8125"
    [[inputs.zookeeper]]
      servers = ["localhost:2181"]
    EOT
    supervisorctl start telegraf
  next:
    - stop

- tag: stop
  shell: |
    
    #
    # - reset the failure counter
    # - stop the broker and stay put
    # - update /data/state
    #
    echo SET N 0 | socat - $SOCKET
    supervisorctl stop zookeeper
    echo '"stopped"' > /data/state
  next: 
    - start
    - stop

- tag: start
  shell: |

    #
    # - grab the key for this broker
    # - set the current entry in zoo.cfg as 0.0.0.0:2888:3888
    # - this index is equal to the pod sequence index
    # - render the zk config template with our peer bindings
    #
    python - <<-EOF
    import os
    import json
    from jinja2 import Template
    
    version = os.environ['ZOOKEEPER_VERSION']
    cfg = json.loads(os.environ['INPUT'])
    key = cfg['key']
    cfg['brokers'][key] = '0.0.0.0'
    raw = \
    """
      tickTime=2000
      initLimit=10
      syncLimit=5
      maxClientCnxns=64
      clientPort=2181
      autopurge.snapRetainCount=3
      autopurge.purgeInterval=4
      dataDir=/data
      dataLogDir=/data
      {%- for index in peers | sort %}
      server.{{index}}={{peers[index]}}:2888:3888
      {%- endfor %}
    """

    with open('/opt/zookeeper-%s/conf/zoo.cfg' % version, 'wb') as fd:
        fd.write(Template(raw).render(peers=cfg['brokers']))
    EOF
    
    #
    # - echo the broker id in the data directory
    # - start the broker
    # - pause a bit to let the JVM boot
    #
    echo $INPUT | jq -r .key > /data/myid
    supervisorctl start zookeeper
    sleep 5 && echo GOTO check | socat - $SOCKET
  next: 
    - check
    - stop

- tag: check
  shell: |

    #
    # - simply issue a periodic MNTR against the local broker
    # - update /data/state
    #
    ZK=$(echo mntr | nc localhost 2181 | grep zk_server_state | awk '{print $2}')
    echo '"'${ZK:=dead}'"'  > /data/state
    if [ "$ZK" == 'standalone' ] || [ "$ZK" == 'leader' ] || [ "$ZK" == 'follower' ] ; then
      
      #
      # - the broker is functioning
      # - reset the failure counter
      # - pause for 25 seconds and loop back
      #
      echo SET N 0 | socat - $SOCKET
      echo local broker is $ZK
      sleep 25 && echo GOTO check | socat - $SOCKET
    
    else

      #
      # - increment the failure counter
      # - if we failed more than 5 times in a row revert to 'stop'
      # - compute an exponential backoff delay using bc
      # - cap it to one minute and loop back
      #
      N=$((N+1))
      if [ $N -gt 5 ] ; then
        echo GOTO stop | socat - $SOCKET  
      else
        echo SET N $N | socat - $SOCKET
        supervisorctl restart zookeeper
        B=$(echo "(2^$N - 1) / 2" | bc)
        if [ $B -gt 60 ] ; then
          B=60
        fi
        echo backing off for $B seconds...
        sleep $B && echo GOTO check | socat - $SOCKET
      fi
    fi
  next: 
    - check
    - stop

- tag: shutdown
